// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	port "github.com/mkaiho/go-ws-sample/usecase/port"
	mock "github.com/stretchr/testify/mock"
)

// RoomsReader is an autogenerated mock type for the RoomsReader type
type RoomsReader struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, input
func (_m *RoomsReader) Find(ctx context.Context, input *port.FindRoomsInput) (*port.FindRoomsOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *port.FindRoomsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *port.FindRoomsInput) (*port.FindRoomsOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *port.FindRoomsInput) *port.FindRoomsOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.FindRoomsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *port.FindRoomsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRoomsReader creates a new instance of RoomsReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomsReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomsReader {
	mock := &RoomsReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
